package SortingAlgs;

public class Sorts {
	
	 public Sorts() {
		 
	 }
	 
	 /// To Do List: 
	 
	 /// Heap Sort (Binary Tree) 
	 /// Quick Sort 
	 public  int partition(int[] arr, int low, int high) {
		int i=low;
		int j=high;
		int pivot=arr[low];
		
		
		
		while(i<j) {
		do {
			i++;
		}while(arr[i]<=pivot);
		
		do {
			j--;
		}while(arr[j]>pivot);
		
			if(i<j) 
			{
				swap(i,j,arr);
			}
		
		}
		swap(low,j,arr);
		
		
		return j;
	
	 }
	 
	 public void quickSort(int[]arr, int low , int high) {
		 int[] arr2 = addmax(arr);
		 if(low<high) {
			 int pi=partition(arr2,low,high);
			 quickSort(arr2,low,pi);
			 quickSort(arr2,pi+1,high);
		 }
		 
		 System.arraycopy(arr, 0, arr2, 0, arr.length-1);
	 }
	 public int[] addmax(int[] arr) {
		 int[] temp = new int[arr.length+1];
		 System.arraycopy(arr, 0, temp, 0, arr.length);
		 temp[temp.length-1]= Integer.MAX_VALUE;
		 
		 return temp;
		 
	 }
	 
	 
	 
	/// Array Sorts 
	public void MergeSort(int[]arr) {
		int n = arr.length;
		if(n<2) return;
		
		int mid=n/2;
		int[] left = new int[mid];
		int[] right= new int[n-mid];
		
		for(int i=0; i<mid; i++) {
			left[i]=arr[i];
		}
		for(int i=mid; i<n; i++) {
			right[i-mid]=arr[i];
		}
			
		MergeSort(left);
		MergeSort(right);
		Merge(left,right,arr);
		
		
	}
	public void Merge(int[]L , int[]R, int[]A){
		int l=L.length;
		int r=R.length;
		int i=0;
		int j=0;
		int k=0;
		while(i<l && j<r) {
			if(L[i]<=R[j]) {
				A[k++]=L[i++];
			}else {
				A[k++]=R[j++];
			}
		}
		while(i<l) {
			A[k++]=L[i++];
		}
		while(j<r) {
			A[k++]=R[j++];
		}
		
	}
	public void InsertionSort(int arr[]) {
		
		for(int i=0; i<arr.length-1; i++) 
			
		{
			int min=i;
			
		for(int j=i+1; j<arr.length; j++) 
		{	
			if(arr[j]<arr[min]) 
			{
					min=j;
			}
				swap(i,min,arr);	
		}	
		}
	}
	
	public void selectionSort(int [] arr) {
		for(int x=0; x<arr.length; x++) {
			int minimum=x;
			
			for(int y=x; y<arr.length; y++) {
				
				if(arr[minimum]>arr[y])  minimum=y;
			}
			swap(x,minimum , arr);
		}
		
	}
	
	public void bubbleSort(int[] arr) {
		
		for(int i= arr.length-1; i>0; i--) {
			for(int j=0; j<i; j++) {
				if(arr[j]>arr[j+1]) {
					swap(j,j+1 , arr);
				}
				
			}
		}
	}
	
	/// Swap method 
	public void swap(int index1, int index2 , int[]arr) {
		int temp= arr[index1];
		arr[index1]=arr[index2];
		arr[index2]=temp;
		
	}
}
