package SortingAlgs;

public class Sorts {
	
	/// Array Sorts 
	
	public void InsertionSort(int arr[]) {
		
		for(int i=0; i<arr.length-1; i++) 
			
		{
			int min=i;
			
		for(int j=i+1; j<arr.length; j++) 
		{	
			if(arr[j]<arr[min]) 
			{
					min=j;
			}
				swap(i,min);	
		}	
		}
	}
	

	public void MergeSort(int[]arr) {
		int n = arr.length;
		if(n<2) return;
		
		int mid=n/2;
		int[] left = new int[mid];
		int[] right= new int[n-mid];
		
		for(int i=0; i<mid; i++) {
			left[i]=arr[i];
		}
		for(int i=mid; i<n; i++) {
			right[i-mid]=arr[i];
		}
			
		MergeSort(left);
		MergeSort(right);
		Merge(left,right,arr);
		
		
	}
	public void Merge(int[]L , int[]R, int[]A){
		int l=L.length;
		int r=R.length;
		int i=0;
		int j=0;
		int k=0;
		while(i<l && j<r) {
			if(L[i]<=R[j]) {
				A[k++]=L[i++];
			}else {
				A[k++]=R[j++];
			}
		}
		while(i<l) {
			A[k++]=L[i++];
		}
		while(j<r) {
			A[k++]=R[j++];
		}
		
	}
	/// Swap method 
	public void swap(int index1, int index2 , int[]arr) {
		int temp= arr[index1];
		arr[index1]=arr[index2];
		arr[index2]=temp;
		
	}
}
